@page "/adminPage"
@using MauiAppBlazor.Models;
@using MauiAppBlazor.Service.Contract;


<div class="row">
    <div class="col-md-6">
        <div class="row  mt-3">
            <div class="col-md-3 mb-2">
                <p>Назва продукту</p>
                <input class="form-text" type="text" @bind="@ProductCatalogDto.Name" />
                <p>Картинка URL</p>
                <input class="form-text" type="url" @bind="@ProductCatalogDto.ImageURL" /><br/>
                <p>Ціна продукта</p>
                <input class="form-text" type="number" @bind="@ProductCatalogDto.Price" /><br />
            </div>
            @if (((ProductCatalogDto.Name != null || ProductCatalogDto.ImageURL != null) &&
                    (ProductCatalogDto.Name != "" || ProductCatalogDto.ImageURL != "")) || ProductCatalogDto.Price > 0)
            {
                <div class="col-md-3 mb-2">
                    <a>
                    <div class="card">
                        <img class="img-thumbnail" src="@ProductCatalogDto.ImageURL">
                        <div class="card-body">
                            <h5 class="card-title mb-3">
                            @ProductCatalogDto.Name
                            </h5>
                            <p class="card-text">
                                <b>@ProductCatalogDto.Price.ToString("C")</b>
                            </p>
                        </div>
                    </div>
                </a>
            </div>
            }
        </div>
        <button type="button" class="btn btn-success mt-3" @onclick="CreateProductCatalog">Створити новий продукт</button>
    </div>
    <div class="col-md-6">
        @if (fullProductCatalogs == null)
        {
             <DisplaySpinner />
        }
        else
        {
             <h3 class="mb-5">Products</h3>

            int productCount = fullProductCatalogs.Count();

            @if (productCount > 0)
            {
                     <div class="row  mt-3">
                    @foreach (var prodGroup in fullProductCatalogs)
                    {                                             
                         <div class="col-md-3 mb-2" @onclick="(() => OpenModelForm(prodGroup))">
                            <a>                             
                                <div class="card">
                                    <div class="row">                                                                          
                                        <img class="img-thumbnail" src="@prodGroup.ImageURL">
                                        <div class="card-body">
                                            <h5 class="card-title mb-3">
                                                            @prodGroup.Name
                                            </h5>
                                            <p class="card-text">
                                                <b>@prodGroup.Price.ToString("C")</b>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                            
                            </a>
                        </div>
                    }
                    </div>

            }
        }
    </div>
</div>

@if (modalForm)
{
    <ModalView TitleText="Видалення" Close="(() => CloseModelForm(modalCatalog))" Create="(() => EditProducCatalog(modalCatalog))" Delete="(() => DeleteProducCatalog(modalCatalog))">
        <BodyContent>

            <p>Назва продукту</p>
            <input class="" type="text" @bind="@modalCatalog.Name"/>
            <p>Картинка URL</p>
            <input class="" type="url" @bind="@modalCatalog.ImageURL" /><br />
            <p>Ціна продукта</p
            <input class="" type="number"  @bind="@modalCatalog.Price" /><br />

        </BodyContent>
    </ModalView>
}

@code {
    public ProductCatalogDto ProductCatalogDto { get; set; } = new();
    public IEnumerable<ProductCatalog> fullProductCatalogs { get; set; }

    public bool modalForm { get; set; }
    public ProductCatalog  modalCatalog { get; set; }

    [Inject]
    public IProductCatalogService ProductCatalogService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetAllProductCatalog();
        modalForm = false;
    }

    public void OpenModelForm(ProductCatalog model)
    {
        modalForm = true;
        modalCatalog = model;
    }
    public void CloseModelForm(ProductCatalog model)
    {
        modalForm = false;
        modalCatalog = new();
    }

    public async Task EditProducCatalog(ProductCatalog model)
    {
        try
        {
            await ProductCatalogService.FullEdit(model);
            CloseModelForm(modalCatalog);

        }
        catch (Exception)
        {
            
            throw;
        }
    }

    
    public async Task DeleteProducCatalog(ProductCatalog model)
    {
        try
        {
            await ProductCatalogService.Delete(model);
            await GetAllProductCatalog();
            CloseModelForm(modalCatalog);

        }
        catch (Exception)
        {
            
            throw;
        }
    }

    public async Task GetAllProductCatalog()
    {
        fullProductCatalogs = await ProductCatalogService.GetItems();
    }

    public async Task CreateProductCatalog()
    {
        try
        {
            if (ProductCatalogDto.Price > 0)
            {
                await ProductCatalogService.Create(ProductCatalogDto);
                await GetAllProductCatalog();
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

}
